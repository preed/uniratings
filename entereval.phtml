<?php
/*
 * The contents of this file are subject to the Jabber Open Source License 
 * Version 1.0 (the "License").  You may not copy or use this file, in either 
 * source code or executable form, except in compliance with the License.  You 
 * may obtain a copy of the License at http://www.jabber.com/license/ or at 
 * http://www.opensource.org/.
 * 
 * Read the LICENSE file included with the source distribution for more
 * information.
 *
 * Software distributed under the License is distributed on an "AS IS" basis, 
 * WITHOUT WARRANTY OF ANY KIND, either express or implied.  See the License 
 * for the specific language governing rights and limitations under the 
 * License.
 *
 * Copyrights:
 *
 * Portions created by or assigned to Polyratings.com are Copyright (c) 
 * 1999-2002 Polyratings.com.  All Rights Reserved.  Contact information for 
 * Polyratings.com, is available at http://www.polyratings.com/.
 *
 * Portions Copyright (c) 2001-2002 J. Paul Reed
 *
 * Contributor(s):
 *
 */

include_once('php/Constants.php');
include_once(PHP_ROOT . 'UIHandle.php');
include_once(PHP_ROOT . 'DBInterfaceLib.php');
include_once(PHP_ROOT . 'EvaluationsLib.php');

$profid = $_REQUEST['profid'];

$output = new UIHandle();

if (preg_match("/^\d+$/", $profid) && !isset($_REQUEST['submission'])) {
   $profExists = GetProfessorInfo($profid, PROFS_PENDING);

   $httpReferer = getenv('HTTP_REFERER');
   $addProfURL = ADDPROF_URL . "?haveinfo=true"; // A cleaner way should be
                                                // found to do this

   if (!is_null($profExists) || $httpReferer == $addProfURL) {
      $output->PutValue('profInfo', GetProfessorInfo($profid, PROFS_PENDING));
      $output->PrintPage('evalCollectEval');
   }
   else {
      $output->PutValue('profList', GetProfessorList()); 
      $output->PrintPage('entereval');
   }
}
else if (isset($_REQUEST['submission'])) {
   $comments = htmlspecialchars($_REQUEST['comments']);

   $submissionInput = array(  'profid' => $profid,
                              'course' => $_REQUEST['course'],
                              'number' => $_REQUEST['number'],
                              'coursetype' => $_REQUEST['coursetype'],
                              'studentcoursetype' => $_REQUEST['studentcoursetype'],
                              'studentclass' => $_REQUEST['studentclass'],
                              'grade' => $_REQUEST['grade'],
                              'ques1' => $_REQUEST['ques1'],
                              'ques2' => $_REQUEST['ques2'],
                              'ques3' => $_REQUEST['ques3'],
                              'comments' => $comments);

   $rv = VerifyEvaluationInput($submissionInput);

   if (EVAL_WELLFORMED != $rv) {
      $output->ErrorPage($evalVerificationErrors[$rv]); 
      exit;
   }

   $courseID = GetCourseID($_REQUEST['course'], $_REQUEST['number']);

   if (is_null($courseID)) {
      $courseID = CreateCourse($_REQUEST['course'], $_REQUEST['number'], 
       $_REQUEST['coursetype'], '');
   }

   $submissionInput['courseid'] = $courseID;

   $rv = RecordEvaluation($submissionInput);

   if (RECORDEVAL_BLOCKED_DUPBLACKOUT == $rv) {
      $output->ErrorPage("Evaluation of that professor is currently blocked");
      exit;
   }

   $output->PutValue('pInfo', GetProfessorInfo($submissionInput['profid'], 
    PROFS_PENDING));
   $output->PrintPage('evalEvaluationSubmitted');
}
else {
   $output->PutValue('profList', GetProfessorList()); 
   $output->PrintPage('entereval');
}

?>
